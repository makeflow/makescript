import * as FS from 'fs';
import * as OS from 'os';
import * as Path from 'path';

import {logger} from '@makeflow/makescript-agent';
import {Castable, Command, Options, command, metadata, option} from 'clime';
import ip from 'ip';
import {Tiva} from 'tiva';
import {v4 as uuidv4} from 'uuid';
import YAML from 'yaml';

import {ConfigFile, generateYamlConfig, transformConfig} from '../config';
import {main} from '../main';

const WORKSPACE_PATH_DEFAULT = Path.resolve(
  OS.homedir(),
  '.config',
  'makescript',
);
const GENERATE_CONFIG_DEFAULT = false;

// TODO: Type safe
const YAML_CONFIG_CONTENT_DEFAULT = (): string =>
  generateYamlConfig({
    'web-admin': {
      host: 'localhost',
      port: 8900,
      url: `http://${ip.address()}:8900`,
    },

    api: {
      host: 'localhost',
      port: 8901,
      url: `http://${ip.address()}:8901`,
    },

    makeflow: {
      'base-url': 'https://makeflow.com',
      'power-app': {
        name: 'makescript',
        'display-name': 'Makescript',
        description: 'Auto generated by makescript',
      },
    },

    'join-token': uuidv4(),

    'resources-path': Path.join(OS.tmpdir(), 'makescript-resources'),
  });

const CONFIG_FILE_NAME = 'makescript.yaml';

export class CLIOptions extends Options {
  @option({
    flag: 'g',
    description: 'Whether only to generate makescript config file.',
    toggle: true,
    default: GENERATE_CONFIG_DEFAULT,
  })
  generateConfigOnly!: boolean;

  @option({
    flag: 'w',
    description: 'The path for makescript to work.',
    default: WORKSPACE_PATH_DEFAULT,
  })
  workspace!: Castable.Directory;
}

@command()
export default class extends Command {
  @metadata
  async execute({generateConfigOnly, workspace}: CLIOptions): Promise<void> {
    let configFilePath = Path.join(workspace.fullName, CONFIG_FILE_NAME);

    let configFileExists = FS.existsSync(configFilePath);

    if (configFileExists && generateConfigOnly) {
      console.warn(
        `The config file "${configFilePath}" has existed, so the new config has not generated.`,
      );
      return;
    }

    if (!configFileExists) {
      let dirname = workspace.fullName;

      if (!FS.existsSync(dirname)) {
        FS.mkdirSync(dirname);
      }

      FS.writeFileSync(configFilePath, YAML_CONFIG_CONTENT_DEFAULT());
    }

    if (generateConfigOnly) {
      return;
    }

    let yamlConfigContent = FS.readFileSync(configFilePath).toString();

    let configFileContent: ConfigFile = YAML.parse(yamlConfigContent);

    let tiva = new Tiva();

    logger.info('Checking config file ...');

    try {
      await tiva.validate(
        {module: '@makeflow/makescript/bld/program/config', type: 'ConfigFile'},
        configFileContent,
      );

      let config = transformConfig(configFileContent, workspace.fullName);

      await main(config);
    } catch (error) {
      if (error.diagnostics) {
        logger.error(
          `Config file structure does not match:\n${error.diagnostics}`,
        );
      } else {
        logger.error(`Unknown error occurred:\n${error.message}`);
      }

      process.exit(1);
    }
  }
}
